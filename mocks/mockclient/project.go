// Code generated by MockGen. DO NOT EDIT.
// Source: client/project.go

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	model "code.sk.org/insomnia_test/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIProjectClient is a mock of IProjectClient interface.
type MockIProjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockIProjectClientMockRecorder
}

// MockIProjectClientMockRecorder is the mock recorder for MockIProjectClient.
type MockIProjectClientMockRecorder struct {
	mock *MockIProjectClient
}

// NewMockIProjectClient creates a new mock instance.
func NewMockIProjectClient(ctrl *gomock.Controller) *MockIProjectClient {
	mock := &MockIProjectClient{ctrl: ctrl}
	mock.recorder = &MockIProjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProjectClient) EXPECT() *MockIProjectClientMockRecorder {
	return m.recorder
}

// GetByProjectID mocks base method.
func (m *MockIProjectClient) GetByProjectID(ctx context.Context, projectID int64) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProjectID", ctx, projectID)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProjectID indicates an expected call of GetByProjectID.
func (mr *MockIProjectClientMockRecorder) GetByProjectID(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProjectID", reflect.TypeOf((*MockIProjectClient)(nil).GetByProjectID), ctx, projectID)
}
