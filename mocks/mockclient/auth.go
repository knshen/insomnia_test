// Code generated by MockGen. DO NOT EDIT.
// Source: client/auth.go

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	consts "code.sk.org/insomnia_test/consts"
	gomock "github.com/golang/mock/gomock"
)

// MockIAuthClient is a mock of IAuthClient interface.
type MockIAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthClientMockRecorder
}

// MockIAuthClientMockRecorder is the mock recorder for MockIAuthClient.
type MockIAuthClientMockRecorder struct {
	mock *MockIAuthClient
}

// NewMockIAuthClient creates a new mock instance.
func NewMockIAuthClient(ctrl *gomock.Controller) *MockIAuthClient {
	mock := &MockIAuthClient{ctrl: ctrl}
	mock.recorder = &MockIAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthClient) EXPECT() *MockIAuthClientMockRecorder {
	return m.recorder
}

// GetPermitProjectIDs mocks base method.
func (m *MockIAuthClient) GetPermitProjectIDs(ctx context.Context, token string, limit, offset int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermitProjectIDs", ctx, token, limit, offset)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermitProjectIDs indicates an expected call of GetPermitProjectIDs.
func (mr *MockIAuthClientMockRecorder) GetPermitProjectIDs(ctx, token, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermitProjectIDs", reflect.TypeOf((*MockIAuthClient)(nil).GetPermitProjectIDs), ctx, token, limit, offset)
}

// GetUserRole mocks base method.
func (m *MockIAuthClient) GetUserRole(ctx context.Context, token string, orgID int64) (consts.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx, token, orgID)
	ret0, _ := ret[0].(consts.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockIAuthClientMockRecorder) GetUserRole(ctx, token, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockIAuthClient)(nil).GetUserRole), ctx, token, orgID)
}

// HasProjectPermission mocks base method.
func (m *MockIAuthClient) HasProjectPermission(ctx context.Context, token string, projectID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProjectPermission", ctx, token, projectID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasProjectPermission indicates an expected call of HasProjectPermission.
func (mr *MockIAuthClientMockRecorder) HasProjectPermission(ctx, token, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProjectPermission", reflect.TypeOf((*MockIAuthClient)(nil).HasProjectPermission), ctx, token, projectID)
}
